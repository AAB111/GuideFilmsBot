from aiogram import Bot, Dispatcher, types

from config import settings
import sys
from aiogram.filters import CommandStart
import asyncio
import logging
from handlers.pop import pop_router
from handlers.content import content_router
from handlers.search import search_router
from handlers.review import review_router
from handlers.card import card_router
from handlers.be_watching import be_watching_router
from handlers.transition import transition_router
from api.requests import request_auth
from middlewares.middleware import CheckUserMiddleware

dp = Dispatcher()


@dp.message(CommandStart())
async def start(message: types.Message):
    welcome_text = (
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —Ñ–∏–ª—å–º–æ–≤! üé¨\n\n"
        "–Ø - –≤–∞—à –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ —ç—Ç–æ–º —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–º –º–∏—Ä–µ.\n"
        "–ú–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ —Ñ–∏–ª—å–º—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏—è.\n"
        "–°–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è –æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–∞—Ö –∏–ª–∏ —Å–æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π —Ñ–∏–ª—å–º.\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—â–µ—Ç–µ, –ø—Ä–æ—Å—Ç–æ –¥–∞–π—Ç–µ –º–Ω–µ –∑–Ω–∞—Ç—å, –∏ —è –Ω–∞–π–¥—É –¥–ª—è –≤–∞—Å –ø–æ—Ö–æ–∂–∏–µ —Ñ–∏–ª—å–º—ã!\n"
        "–ò –ø–æ–º–Ω–∏—Ç–µ, —è –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –≤ –≤—ã–±–æ—Ä–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –≤–µ—á–µ—Ä–∞! üçø\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/pop - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–∞—Ö\n"
        "/content - –ø–æ–ª—É—á–∏—Ç—å —Ñ–∏–ª—å–º—ã –ø–æ–¥ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã\n"
        "/card - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ñ–∏–ª—å–º–µ\n"
        "/tabs - –∑–∞–∫–ª–∞–¥–∫–∏ –≤–∞—à–∏—Ö —Ñ–∏–ª—å–º–æ–≤\n"
    )
    status = await request_auth(message.from_user.id)
    if status == 500 or status is None:
        await message.answer('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –ø–æ–∑–∂–µ.')
        return
    await message.answer(welcome_text)


async def main():
    bot = Bot(token=settings.API_TG_BOT_TOKEN)
    dp.callback_query.middleware(CheckUserMiddleware())
    pop_router.message.middleware(CheckUserMiddleware())
    content_router.message.middleware(CheckUserMiddleware())
    transition_router.message.middleware(CheckUserMiddleware())
    review_router.message.middleware(CheckUserMiddleware())
    be_watching_router.message.middleware(CheckUserMiddleware())
    card_router.message.middleware(CheckUserMiddleware())
    search_router.message.middleware(CheckUserMiddleware())
    dp.include_router(pop_router)
    dp.include_router(content_router)
    dp.include_router(transition_router)
    dp.include_router(review_router)
    dp.include_router(be_watching_router)
    dp.include_router(card_router)
    dp.include_router(search_router)
    await dp.start_polling(bot)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
