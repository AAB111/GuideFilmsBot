import pytest
from unittest import mock
from main import start
from unittest.mock import AsyncMock, patch
from tests.utils import TEST_USER


@pytest.mark.asyncio
async def test_start_handler_not_backend():
    with patch('main.request_auth', return_value=None) as mock_request_auth:
        message_mock = AsyncMock()
        message_mock.from_user.id = TEST_USER.id
        message_mock.from_user.full_name = TEST_USER.first_name + " " + TEST_USER.last_name
        await start(message_mock)

        assert mock_request_auth.call_count == 1
        assert mock_request_auth.call_args == mock.call(TEST_USER.id)

        message_mock.answer.assert_awaited_once_with('–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start –ø–æ–∑–∂–µ.')


@pytest.mark.asyncio
async def test_start_handler():
    with patch('main.request_auth', return_value=200) as mock_request_auth:
        message_mock = AsyncMock()
        message_mock.from_user.id = TEST_USER.id
        message_mock.from_user.full_name = TEST_USER.first_name + " " + TEST_USER.last_name
        await start(message_mock)
        assert mock_request_auth.call_count == 1
        assert mock_request_auth.call_args == mock.call(TEST_USER.id)
        expected_welcome_text = (
            f"–ü—Ä–∏–≤–µ—Ç, {message_mock.from_user.full_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä —Ñ–∏–ª—å–º–æ–≤! üé¨\n\n"
            "–Ø - –≤–∞—à –ø—Ä–æ–≤–æ–¥–Ω–∏–∫ –≤ —ç—Ç–æ–º —É–¥–∏–≤–∏—Ç–µ–ª—å–Ω–æ–º –º–∏—Ä–µ.\n"
            "–ú–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ—á—å –≤–∞–º –Ω–∞–π—Ç–∏ –ª—É—á—à–∏–µ —Ñ–∏–ª—å–º—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –Ω–∞—Å–ª–∞–∂–¥–µ–Ω–∏—è.\n"
            "–°–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è –æ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–∞—Ö –∏–ª–∏ —Å–æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π —Ñ–∏–ª—å–º.\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –∏—â–µ—Ç–µ, –ø—Ä–æ—Å—Ç–æ –¥–∞–π—Ç–µ –º–Ω–µ –∑–Ω–∞—Ç—å, –∏ —è –Ω–∞–π–¥—É –¥–ª—è –≤–∞—Å –ø–æ—Ö–æ–∂–∏–µ —Ñ–∏–ª—å–º—ã!\n"
            "–ò –ø–æ–º–Ω–∏—Ç–µ, —è –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –≤ –≤—ã–±–æ—Ä–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –≤–µ—á–µ—Ä–∞! üçø"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/card - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —Ñ–∏–ª—å–º–µ\n"
        )
        message_mock.answer.assert_awaited_once_with(expected_welcome_text)
